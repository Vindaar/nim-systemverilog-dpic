import nimterop/cimport
import os
from macros import getProjectPath

# cDisableCaching()
# cDebug()

const
  # mean_func_1_64.so is generated by running ./build_script_64.
  includePath = getProjectPath() / "matlab_export"
  soFile = includePath / "mean_func_1_64.so"
static:
  doAssert fileExists(includePath / "rtwtypes.h")
  doAssert fileExists(includePath / "mean_func_1_types.h")
  doAssert fileExists(includePath / "mean_func_1.h")

# cAddSearchDir + cSearchPath does not work: https://github.com/nimterop/nimterop/issues/122.
# cAddSearchDir(includePath)
# cImport(cSearchPath("mean_func_1.h"))
# As cAddSearchDir does not work, each .h needs to be added manually.
cImport(includePath / "rtwtypes.h")
cImport(includePath / "mean_func_1_types.h")
cImport(includePath / "mean_func_1.h")

type
  DataObj* = emxArray_int32_T
  DataObjRef* = ref DataObj

  # struct0_T
  InputObj* = object
    data*: DataObjRef # it's ptr instead of ref in the original type
    Len*: cint # length of data.data[]
  InputObjRef* = ref InputObj

  OutputObj* = struct1_T
  OutputObjRef* = ref OutputObj

# Below is not needed as we are manually creating mean_func_1 wrapper.
# cImport(cSearchPath("mean_func_1.h"))

# override the mean_func_1 signature
# below does not work
# proc mean_func_1*(inp: InputObjRef; outp: OutputObjRef) {.importc, header: includePath / "mean_func_1.h".}
proc mean_func_1*(inp: InputObjRef; outp: OutputObjRef) {.importc, dynlib: soFile.}
