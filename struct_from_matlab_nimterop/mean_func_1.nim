import nimterop/cimport
import os
from macros import getProjectPath

# cDisableCaching()
# cDebug()

const
  # mean_func_1_64.so is generated by running ./build_script_64.
  includePath = getProjectPath() / "matlab_export"
  soFile = includePath / "mean_func_1_64.so"
static:
  doAssert fileExists(includePath / "rtwtypes.h")
  doAssert fileExists(includePath / "mean_func_1_types.h")
  doAssert fileExists(includePath / "mean_func_1.h")
cAddSearchDir(includePath)

cImport(cSearchPath("rtwtypes.h")) # for boolean_T

cOverride:
  type
    emxArray_int32_T* = object
      data*: ptr UncheckedArray[cint]
      size*: ptr UncheckedArray[cint]
      allocatedSize*: cint
      numDimensions*: cint
      canFreeData*: boolean_T
    DataObj* = emxArray_int32_T
    DataObjRef* = ref DataObj

    InputObj* = object
      data*: DataObjRef
      Len*: cint # length of data.data[]
    struct0_T* = InputObj
    InputObjRef* = ref InputObj

cImport(cSearchPath("mean_func_1_types.h"))
type
  OutputObj* = struct1_T
  OutputObjRef* = ref OutputObj

# Below is not needed as we are manually creating mean_func_1 wrapper.
# cImport(cSearchPath("mean_func_1.h"))

# override the mean_func_1 signature
# below does not work
# proc mean_func_1*(inp: InputObjRef; outp: OutputObjRef) {.importc, header: includePath / "mean_func_1.h".}
proc mean_func_1*(inp: InputObjRef; outp: OutputObjRef) {.importc, dynlib: soFile.}
