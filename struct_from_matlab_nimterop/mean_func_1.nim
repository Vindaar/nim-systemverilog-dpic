import nimterop/cimport
import os
from macros import getProjectPath

# static:
#   cDisableCaching()
#   cDebug()

const
  # mean_func_1_64.so is generated by running ./build_script_64.
  includePath = getProjectPath() / "matlab_export"
  soFile = includePath / "mean_func_1_64.so"
static:
  doAssert fileExists(includePath / "rtwtypes.h")
  doAssert fileExists(includePath / "mean_func_1_types.h")
  doAssert fileExists(includePath / "mean_func_1.h")
  # Put cAddSearchDir in static block:
  #  https://github.com/nimterop/nimterop/issues/122
  cAddSearchDir(includePath)

# For now, we need to cimport each included file manually:
#  https://github.com/nimterop/nimterop/issues/123
cImport(cSearchPath("rtwtypes.h"))

cOverride:
  type
    emxArray_int32_T* = object
      data*: ptr UncheckedArray[cint] # this pointer needed to be fixed
      size*: ptr UncheckedArray[cint] # this pointer needed to be fixed
      allocatedSize*: cint
      numDimensions*: cint
      canFreeData*: boolean_T
    DataObj* = emxArray_int32_T

cImport(cSearchPath("mean_func_1_types.h"))

type
  InputObj* = struct0_T
  InputObjRef* = ref InputObj

  OutputObj* = struct1_T
  OutputObjRef* = ref OutputObj

proc mean_func_1*(inp: InputObjRef; outp: OutputObjRef) {.importc, dynlib: soFile.}
