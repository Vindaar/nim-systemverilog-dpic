import os, svdpi, mean_func_1

const
  # mean_func_1_64.so is generated by running ./build_script_64.
  soFile = meanFuncIncludePath / "mean_func_1_64.so"
proc mean_func_1*(inp: ptr InputObj; outp: ptr OutputObj) {.importc, dynlib: soFile.}

proc get_mean_func_1_out(arrPtr: svOpenArrayHandle): OutputObj =
  let
    arrSize = svSizeOfArray(arrPtr)
    arrLen = svLength(arrPtr, 1)

    uncheckedArrPtr0 = alloc0(arrSize)
    uncheckedArrPtr1 = cast[ptr UncheckedArray[cint]](uncheckedArrPtr0)

    dataObjPtr0 = alloc0(sizeof(DataObj))
    dataObjPtr1 = cast[ptr DataObj](dataObjPtr0)

  dataObjPtr1[].data = uncheckedArrPtr1

  let
    inpPtr0 = alloc0(sizeof(InputObj))
    inpPtr1 = cast[ptr InputObj](inpPtr0)

  inpPtr1[].data = dataObjPtr1
  inpPtr1[].len = arrLen

  for i in 0.cint ..< arrLen:
    let
      arrElemPtr = cast[ptr cint](svGetArrElemPtr1(arrPtr, i))
    inpPtr1[].data[].data[i] = arrElemPtr[]

  # Just allocate the output object for mean_func_1.
  let
    outPtr0 = alloc0(sizeof(OutputObj))
    outPtr1 = cast[ptr OutputObj](outPtr0)

  mean_func_1(inpPtr1, outPtr1)
  return outPtr1[]

proc get_mean(arrPtr: svOpenArrayHandle): cdouble {.exportc.} =
  return get_mean_func_1_out(arrPtr).mean

proc get_max(arrPtr: svOpenArrayHandle): cint {.exportc.} =
  return get_mean_func_1_out(arrPtr).max

proc get_min(arrPtr: svOpenArrayHandle): cint {.exportc.} =
  return get_mean_func_1_out(arrPtr).min

proc get_params(arrPtr: svOpenArrayHandle; params: ref OutputObj) {.exportc.} =
  params[] = get_mean_func_1_out(arrPtr)
